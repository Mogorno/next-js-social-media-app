// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  hashPassword  String?
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  role     UserRole? @default(USER)

  Authenticator         Authenticator[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  friendshipsInitiated Friendship[] @relation("initiator")
  friendshipsReceived  Friendship[] @relation("receiver")

  posts    Post[]
  comments Comment[]

  sentMessages Message[] @relation("SentMessages")

  chatMemberships ChatMember[]

  ownedGroups      Group[]           @relation("OwnedGroups")
  groupMemberships GroupMembership[]
  groupMessages    GroupMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.String
  access_token      String?  @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.String
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model TwoFactorConfirmation {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Friendship {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  initiatorId String           @db.ObjectId
  receiverId  String           @db.ObjectId
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())

  initiator User @relation("initiator", fields: [initiatorId], references: [id])
  receiver  User @relation("receiver", fields: [receiverId], references: [id])

  @@unique([initiatorId, receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

model Chat {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?

  members  ChatMember[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatMemberRole {
  ADMIN
  MODERATOR
  MEMBER
}

model ChatMember {
  id       String         @id @default(auto()) @map("_id") @db.ObjectId
  chat     Chat           @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId   String         @db.ObjectId
  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String         @db.ObjectId
  joinedAt DateTime       @default(now())
  role     ChatMemberRole @default(MEMBER)

  @@unique([chatId, userId])
  @@index([chatId])
  @@index([userId])
}

model Message {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime  @default(now())
  editedAt  DateTime?

  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId String @db.ObjectId

  sender   User   @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String @db.ObjectId

  @@index([chatId])
  @@index([senderId])
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  parentPost   Post?   @relation("PostToReposts", fields: [parentPostId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentPostId String? @db.ObjectId

  reposts Post[] @relation("PostToReposts")

  comments Comment[]

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String? @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String @db.ObjectId

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String @db.ObjectId

  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId String?   @db.ObjectId
  replies  Comment[] @relation("CommentReplies")
}

model Group {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  owner   User   @relation("OwnedGroups", fields: [ownerId], references: [id])
  ownerId String @db.ObjectId

  members  GroupMembership[]
  posts    Post[]
  messages GroupMessage[]
}

model GroupMembership {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.ObjectId
  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId

  @@unique([userId, groupId])
}

model GroupMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String @db.ObjectId

  group   Group  @relation(fields: [groupId], references: [id])
  groupId String @db.ObjectId
}
